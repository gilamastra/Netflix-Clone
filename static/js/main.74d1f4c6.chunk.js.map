{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignUpScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreens.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundImage","backdrop_path","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","console","log","map","poster_path","id","HomeScreen","document","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignUpScreen","loginScreenEmail","email","setEmail","password","setPassword","onChange","e","target","value","type","placeholder","preventDefault","signInWithEmailAndPassword","then","user","catch","err","alert","message","createUserWithEmailAndPassword","authUser","error","LoginScreen","signIn","setSignIn","input","setInput","action","userSlice","createSlice","initialState","reducers","login","state","payload","logout","actions","selectUser","ProfileScreens","useSelector","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","store","configureStore","reducer","useReducer","Boolean","location","hostname","match","require","config","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74d1f4c6.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n\r\n});\r\n\r\n\r\n\r\nexport  default instance;","const API_KEY = \"a121101f2a13921f3651ca347f6ad695\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Banner.css\"\r\nimport axios from \"./axios\"\r\nimport requests from \"./Requests\"\r\n\r\nfunction Banner() {\r\n    const [movie,setMovie] = useState([]);\r\n\r\n\r\n    useEffect(() =>{\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                  Math.floor(Math.random() * request.data.results.length -1)\r\n              ]\r\n           )\r\n\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n    },[])\r\n\r\n\r\n    function truncate(string, n){\r\n        return string?.length > n ? string.substr(0, n - 1) + '...' :string;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" style={{\r\n            backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n       }}>\r\n      <div className=\"banner--fadeLeft \"/>\r\n\r\n           <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <h1 className=\"banner__description\">\r\n               {truncate(movie?.overview\r\n                 ,150)}    \r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n            </div> \r\n\r\n            <div className=\"banner--fadeBottom\" />\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  const history = useHistory();\r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true);\r\n    } else {\r\n      handleShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavBar);\r\n    return () =>\r\n      window.removeEventListener(\"scroll\", transitionNavBar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <div className=\"nav__contents\">\r\n        <img\r\n          onClick={() => history.push(\"/\")}\r\n          className=\"nav__logo\"\r\n          src=\"https://crm7.com.br/wp-content/uploads/2020/11/Netflix-Logo.png\"\r\n          alt=\"logo\"\r\n        />\r\n\r\n        <img\r\n          className=\"nav__avatar\"\r\n          src=\"https://i.pinimg.com/originals/b6/77/cd/b677cd1cde292f261166533d6fe75872.png\"\r\n          alt=\"\"\r\n          onClick={() => history.push(\"/profile\")}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import axios from \"./axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./row.css\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      console.log(request.data.results);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map(\r\n          (movie) =>\r\n            ((isLargeRow && movie.poster_path) ||\r\n              (!isLargeRow && movie.backdrop_path)) && (\r\n              <img\r\n                className={`row__poster ${\r\n                  isLargeRow && \"row__posterLarge\"\r\n                }`}\r\n                key={movie.id}\r\n                src={`${base_url}${\r\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`}\r\n                alt={movie.name}\r\n              />\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useEffect } from \"react\";\r\nimport Banner from \"../Banner\";\r\nimport \"./HomeScreen.css\";\r\nimport Nav from \"../Nav\";\r\nimport requests from \"../Requests\";\r\nimport Row from \"../Row\";\r\n\r\nfunction HomeScreen() {\r\n  useEffect(() => {\r\n    document.title = \"Netflix - Home\";\r\n  }, []);\r\n  return (\r\n    <div className=\"homeScreen\">\r\n      <Nav />\r\n\r\n      <Banner />\r\n\r\n      <Row\r\n        title=\"NETFLIX ORIGINALS\"\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n      />\r\n\r\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n\r\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n\r\n      <Row\r\n        title=\"Action Movies\"\r\n        fetchUrl={requests.fetchActionMovies}\r\n      />\r\n\r\n      <Row\r\n        title=\"Comedy Movies\"\r\n        fetchUrl={requests.fetchComedyMovies}\r\n      />\r\n\r\n      <Row\r\n        title=\"Horror Movies\"\r\n        fetchUrl={requests.fetchHorrorMovies}\r\n      />\r\n\r\n      <Row\r\n        title=\"Romance Movies\"\r\n        fetchUrl={requests.fetchRomanceMovies}\r\n      />\r\n\r\n      <Row\r\n        title=\"Documentaries\"\r\n        fetchUrl={requests.fetchDocumentaries}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDK45ksmEeO-LAh5h6Y0hs2aai7o3T79fY\",\r\n  authDomain: \"netflix-clone-98326.firebaseapp.com\",\r\n  projectId: \"netflix-clone-98326\",\r\n  storageBucket: \"netflix-clone-98326.appspot.com\",\r\n  messagingSenderId: \"796741230784\",\r\n  appId: \"1:796741230784:web:003fd1cff65c519ca8cd25\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport { auth };\r\nexport default db;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { auth } from \"../firebase\";\r\nimport \"./signUpScreen.css\";\r\n\r\nconst SignUpScreen = ({ loginScreenEmail }) => {\r\n  useEffect(() => {\r\n    document.title = \"Netflix - SignUp\";\r\n  }, []);\r\n  const [email, setEmail] = useState(loginScreenEmail || \"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const register = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((authUser) => {\r\n        console.log(authUser);\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n\r\n    auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((user) => {\r\n        console.log(user);\r\n      })\r\n      .catch((err) => {\r\n        alert(err.message);\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"signUpScreen\">\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          type=\"email\"\r\n          name=\"\"\r\n          value={email}\r\n          placeholder=\"Email\"\r\n          id=\"\"\r\n        />\r\n        <input\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          placeholder=\"Password\"\r\n          type=\"password\"\r\n        />\r\n        <button onClick={signIn} type=\"submit\">\r\n          Sign In\r\n        </button>\r\n\r\n        <h4>\r\n          <span className=\"signUpScreen__gray\"> New To Netflix?</span>{\" \"}\r\n          <span className=\"signUpScreen__link\" onClick={register}>\r\n            Sign Up Now.\r\n          </span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpScreen;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./loginScreen.css\";\r\nimport SignUpScreen from \"./SignUpScreen\";\r\nconst LoginScreen = () => {\r\n  const [signIn, setSignIn] = useState(false);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    document.title = \"Netflix - Login\";\r\n  }, []);\r\n  return (\r\n    <div className=\"loginScreen\">\r\n      <div className=\"loginScreen__background\">\r\n        <img\r\n          className=\"loginScreen__logo    \"\r\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"\"\r\n        />\r\n        <button\r\n          onClick={() => setSignIn(true)}\r\n          className=\"loginScreen__button\"\r\n        >\r\n          Sign In\r\n        </button>\r\n        <div className=\"loginScreen__gradient\" />\r\n      </div>\r\n      <div className=\"loginScreen__body\">\r\n        {signIn ? (\r\n          <SignUpScreen loginScreenEmail={input} />\r\n        ) : (\r\n          <>\r\n            <h1>Unlimited films, TV programmes and more.</h1>\r\n            <h2>Watch anywhere. Cancel at any time.</h2>\r\n            <h3>\r\n              Ready to watch? Enter your email to create or restart\r\n              your membership.\r\n            </h3>\r\n\r\n            <div className=\"loginScreen__input\">\r\n              <form action=\"\">\r\n                <input\r\n                  onChange={(e) => setInput(e.target.value)}\r\n                  type=\"email\"\r\n                  placeholder=\"Email address\"\r\n                />\r\n                <button\r\n                  onClick={() => setSignIn(true)}\r\n                  className=\"loginScreen__getStarted\"\r\n                >\r\n                  GET STARTED\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\nexport const { login, logout } = userSlice.actions;\nexport const selectUser = (state) => state.user.user;\nexport default userSlice.reducer;\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport { auth } from \"../firebase\";\r\nimport Nav from \"../Nav\";\r\nimport \"./profileScreen.css\";\r\n\r\nconst ProfileScreens = () => {\r\n  useEffect(() => {\r\n    document.title = \"Netflix - Profile\";\r\n  }, []);\r\n  const user = useSelector(selectUser);\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"profileScreen\">\r\n      <Nav />\r\n      <div className=\"profileScreen__body\">\r\n        <h1>Edit Profile</h1>\r\n        <div className=\"profileScreen__info\">\r\n          <img\r\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n            alt=\"\"\r\n          />\r\n          <div className=\"profileScreen__details\">\r\n            <h2>{user.email}</h2>\r\n            <div className=\"profileScreen__plans\">\r\n              <h3>Plans</h3>\r\n              <h4>Renewal date:</h4>\r\n\r\n              <div className=\"profileScreen__plan\">\r\n                <div className=\"profileScreen__planLeft\">\r\n                  <p>Netflix Standard</p>\r\n                  <p>1080p</p>\r\n                </div>\r\n                <button className=\"profileScreen__planButton\">\r\n                  Subscribe\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"profileScreen__plan\">\r\n                <div className=\"profileScreen__planLeft\">\r\n                  <p>Netflix Basic</p>\r\n                  <span>480p</span>\r\n                </div>\r\n                <button className=\"profileScreen__planButton\">\r\n                  Subscribe\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"profileScreen__plan\">\r\n                <div className=\"profileScreen__planLeft\">\r\n                  <p>Netflix Premium</p>\r\n                  <p>4k+HDR</p>\r\n                </div>\r\n                <button className=\"profileScreen__planButton\">\r\n                  Subscribe\r\n                </button>\r\n              </div>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  history.push(\"/\");\r\n                  auth.signOut();\r\n                }}\r\n                type=\"submit\"\r\n                className=\"profileScreen__signOut \"\r\n              >\r\n                Sign Out\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileScreens;\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport { auth } from \"./firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, logout, selectUser } from \"./features/userSlice\";\nimport ProfileScreens from \"./screens/ProfileScreens\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth) {\n        dispatch(\n          login({\n            uid: userAuth.uid,\n            email: userAuth.email,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n  }, [dispatch]);\n  return (\n    <Router>\n      {!user ? (\n        <LoginScreen />\n      ) : (\n        <Switch>\n          <Route path=\"/profile\">\n            <ProfileScreens />\n          </Route>\n\n          <Route path=\"/\">\n            <div className=\"app\">\n              <HomeScreen />\n            </div>\n          </Route>\n        </Switch>\n      )}\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport useReducer from \"../features/userSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: useReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}